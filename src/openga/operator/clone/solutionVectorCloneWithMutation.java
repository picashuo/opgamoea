package openga.operator.clone;
import openga.chromosomes.*;
import openga.operator.mutation.*;
/**
 * <p>Title: The OpenGA project which is to build general framework of Genetic algorithm.</p>
 * <p>Description: When there are two solution that is identical, one is generated by shift-mutation.</p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: Yuan-Ze University</p>
 * @author Chen, Shih-Hsin
 * @version 1.0
 */

public class solutionVectorCloneWithMutation extends solutionVectorClone {
  public solutionVectorCloneWithMutation() {
  }

  public int cutPoint1, cutPoint2;       //the genes between the two points are inversed

  public void startToClone(){
    numberOfOverlapped = 0;
    for(int i = 0 ; i < sizeOfPop - 1 ; i ++ ){
      for(int j = i + 1; j < sizeOfPop ; j ++ ){
        if(checkIdenticalSoln(originalPop.getSingleChromosome(i), originalPop.getSingleChromosome(j))){
          originalPop.setSingleChromosome(j, generateNewSolution(originalPop.getSingleChromosome(j)));
          numberOfOverlapped ++;
        }
      }
    }
  }

  /**
   * @param chromosome1 The identical solution
   * @return To generate new solution by swap mutation operator.
   */
  public chromosome generateNewSolution(chromosome chromosome1){
    openga.operator.mutation.swapMutation Mutation1 = new openga.operator.mutation.swapMutation();
    Mutation1.chromosomeLength = originalPop.getLengthOfChromosome();
    Mutation1.setCutpoint();
    return Mutation1.swaptGenes(chromosome1);
  }

}